AWSTemplateFormatVersion: 2010-09-09
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/cloud9/amis/amazonlinux-2-x86_64'
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.small
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "jam"
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  Bootstrapper:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT1H1M1S
    Properties:
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          pip3 install awscli --upgrade --user
          export PATH=~/.local/bin:$PATH
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Bootstrapper --region ${AWS::Region}
          mkdir -p /tmp/
          wget https://aws-jam-challenge-resources-${AWS::Region}.s3.amazonaws.com/spark-on-eks-made-easy/bootstrap.sh -P /tmp/
          wget https://aws-jam-challenge-resources-${AWS::Region}.s3.amazonaws.com/spark-on-eks-made-easy/SparkOnEKS.template -P /tmp/
          /bin/bash /tmp/bootstrap.sh
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Bootstrapper --region ${AWS::Region}
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref RootInstanceProfile
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: "Name"
          Value: "JamOrchestrator"
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: RootRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref BootStrapPolicy
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole
  LabBucket:
    Type: "AWS::S3::Bucket"
    Properties: 
      BucketName: !Sub 'sparklab-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        # access logs for this bucket will be stored in the same bucket
        LogFilePrefix: !Sub 'sparklab-${AWS::AccountId}-${AWS::Region}' 
  LogWriteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LabBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - logging.s3.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::sparklab-${AWS::AccountId}-${AWS::Region}/AWSLogs/*'
            Condition:
              ArnLike:
                aws:SourceArn: !Sub 'arn:aws:s3:::sparklab-${AWS::AccountId}-${AWS::Region}'
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId           
  CDCDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId   
      DatabaseInput:
        Name: default
        Description: Database to hold cdc tables for the challenge
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      Description: permission to publish VPC flow logs to CloudWatch Logs.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CloudWatchLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt VPCFlowLogsLogGroup.Arn
  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  VPCFlowLogsToCloudWatch:
    Type: AWS::EC2::FlowLog
    Properties:
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogsLogGroup
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: REJECT
      Tags:
        - Key: Name
          Value: VPC Flow Logs CloudWatch
  BootStrapPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: BootStrapPolicy
      Description: A custom policy for the EC2 bootstrapping that is only used for the EC2 instance to deploy resources. The instance cannot be logged into.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - s3:List*
              - s3:Get*
              - s3:Put*
              - s3:CreateBucket
            Resource:
              - arn:aws:s3:::sparkoneks-appcode*
              - !Sub arn:aws:s3:::sparklab-${AWS::AccountId}-${AWS::Region}
              - !Sub arn:aws:s3:::sparklab-${AWS::AccountId}-${AWS::Region}/*
          - Effect: Allow
            Action: 
              - cloudformation:CreateStack
              - cloudformation:CreateChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:UpdateStack
              - cloudformation:DeleteStack
              - cloudformation:Describe*
              - cloudformation:ListStackResources
              - cloudformation:GetTemplateSummary
            Resource: 
              - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
          - Effect: Allow
            Action: 
              - cloud9:CreateEnvironmentEC2
            Resource: "*"
            Condition:
              'Null':
                'cloud9:OwnerArn': 'false'
          - Effect: Allow
            Action: 
              - athena:UpdateWorkGroup
            Resource:
              - !Sub arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/primary
          - Effect: Allow
            Action: iam:PassRole
            Resource: 
              - !Sub arn:aws:iam::${AWS::AccountId}:role/AWSLabsUse*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/spark-on-eks-NodeInstanceRole

          - Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource: 
              - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/eks.amazonaws.com/AWSServiceRoleForAmazonEKS
              - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/eks-nodegroup.amazonaws.com/AWSServiceRoleForAmazonEKSNodegroup
          - Effect: "Allow"
            Action: 
              - ec2:Describe*
            Resource: "*"
            Condition:
              StringEquals:
                aws:RequestedRegion: !Ref AWS::Region
          - Effect: Allow
            Action: 
              - ec2:RunInstances
              - ec2:CreateInternetGateway
              - ec2:CreateLaunchTemplate
              - ec2:CreateNatGateway
              - ec2:CreateRoute
              - ec2:CreateRouteTable
              - ec2:CreateSecurityGroup
              - ec2:CreateSubnet
              - ec2:CreateTags
              - ec2:CreateVpc
              - ec2:AllocateAddress
              - ec2:ModifyVpcAttribute
              - ec2:AttachInternetGateway
              - ec2:ModifySubnetAttribute
              - ec2:RevokeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AssociateRouteTable
            Resource: 
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:elastic-ip/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:internet-gateway/*"
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:launch-template/*"
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:natgateway/*"
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/*"
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*"
            Condition:
              StringLikeIfExists:
                'ec2:InstanceType':
                  - 't3.micro'
                  - 't3.small'
                  - 't3.large'  
                  - 'r5.xlarge'
                  - 'r5a.xlarge'
                  - 'r4.xlarge'
          - Effect: Allow
            Action: 
              - iam:ListRoles
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/*
          - Effect: Allow
            Action: 
              - iam:CreateRole
              - iam:TagRole
              - iam:PutRolePolicy
              - iam:AttachRolePolicy
              - iam:Get*
              - iam:List*
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/RootRole
              - !Sub arn:aws:iam::${AWS::AccountId}:role/AWSLabsUser*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/SparkOnEKS*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/spark-on-eks*
          - Effect: Allow
            Action: 
              - lambda:PublishLayerVersion
              - lambda:GetLayerVersion
            Resource:
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:*
          - Effect: Allow
            Action: 
              - lambda:CreateFunction
              - lambda:GetFunction
              - lambda:InvokeFunction
              - lambda:TagResource
            Resource:  
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SparkOnEKS*
          - Effect: Allow
            Action: 
              - secretsmanager:GetRandomPassword
            Resource: "*"
          - Effect: Allow
            Action: 
              - secretsmanager:CreateSecret
              - secretsmanager:TagResource 
            Resource: 
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:jHubPwd*
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:TagResource
              - logs:PutRetentionPolicy
            Resource: 
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vendedlogs/*
          - Effect: Allow
            Action: 
              - logs:DescribeLogGroups 
            Resource:    
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:* 
          - Effect: Allow
            Action: 
              - states:CreateStateMachine 
              - states:TagResource
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
          - Effect: Allow
            Action: 
              - eks:CreateNodegroup
              - eks:TagResource
            Resource:
              - !Sub arn:aws:eks:${AWS::Region}:${AWS::AccountId}:cluster/spark-on-eks
          - Effect: Allow
            Action: 
              - ssm:PutParameter
            Resource: 
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*